//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceClient.ANHService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerType", Namespace="http://schemas.datacontract.org/2004/07/ANH_WCF_Interface")]
    public enum ServerType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConnectionServer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChatServer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoginServer = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ZoneServer = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PingServer = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/ANH_WCF_Interface")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Message = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cancelled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Completed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STDErr = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ANHService.IAnhService", CallbackContract=typeof(ServiceClient.ANHService.IAnhServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IAnhService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnhService/AuthenticateSession", ReplyAction="http://tempuri.org/IAnhService/AuthenticateSessionResponse")]
        bool AuthenticateSession(string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnhService/StartServer", ReplyAction="http://tempuri.org/IAnhService/StartServerResponse")]
        string StartServer(ServiceClient.ANHService.ServerType type, string args);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnhService/StopServer", ReplyAction="http://tempuri.org/IAnhService/StopServerResponse")]
        string StopServer(ServiceClient.ANHService.ServerType type, string args);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnhService/GetServerStatuses")]
        void GetServerStatuses();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnhService/GetAvailableServers")]
        void GetAvailableServers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnhService/SubscribeToStatusUpdates", ReplyAction="http://tempuri.org/IAnhService/SubscribeToStatusUpdatesResponse")]
        string SubscribeToStatusUpdates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnhService/UnsubscribeFromStatusUpdates", ReplyAction="http://tempuri.org/IAnhService/UnsubscribeFromStatusUpdatesResponse")]
        string UnsubscribeFromStatusUpdates();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnhServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnhService/ServerMessage")]
        void ServerMessage(ServiceClient.ANHService.ServerType ServType, string Args, ServiceClient.ANHService.MessageType MessType, string Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnhService/ServerStatus")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceClient.ANHService.ServerType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceClient.ANHService.MessageType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ServiceClient.ANHService.ServerType[]))]
        void ServerStatus(object[] status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAnhService/AvailableServers")]
        void AvailableServers(ServiceClient.ANHService.ServerType[] servers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnhServiceChannel : ServiceClient.ANHService.IAnhService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnhServiceClient : System.ServiceModel.DuplexClientBase<ServiceClient.ANHService.IAnhService>, ServiceClient.ANHService.IAnhService {
        
        public AnhServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AnhServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AnhServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AnhServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AnhServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool AuthenticateSession(string hash) {
            return base.Channel.AuthenticateSession(hash);
        }
        
        public string StartServer(ServiceClient.ANHService.ServerType type, string args) {
            return base.Channel.StartServer(type, args);
        }
        
        public string StopServer(ServiceClient.ANHService.ServerType type, string args) {
            return base.Channel.StopServer(type, args);
        }
        
        public void GetServerStatuses() {
            base.Channel.GetServerStatuses();
        }
        
        public void GetAvailableServers() {
            base.Channel.GetAvailableServers();
        }
        
        public string SubscribeToStatusUpdates() {
            return base.Channel.SubscribeToStatusUpdates();
        }
        
        public string UnsubscribeFromStatusUpdates() {
            return base.Channel.UnsubscribeFromStatusUpdates();
        }
    }
}
